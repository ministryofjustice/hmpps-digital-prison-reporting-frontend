/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/reports/{reportId}/{reportVariantId}': {
    /** @description Returns the dataset for the given report ID and report variant ID filtered by the filters provided in the query. */
    get: operations['configuredApiDataset']
  }
  '/reports/{reportId}/{reportVariantId}/count': {
    /** @description Returns the number of records for the given report ID and report variant ID filtered by the filters provided in the query. */
    get: operations['configuredApiCount']
  }
  '/definitions': {
    /** @description Gets all report definitions */
    get: operations['definitions']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    ErrorResponse: {
      /** Format: int32 */
      status: number
      /** Format: int32 */
      errorCode?: number
      userMessage?: string
      developerMessage?: string
      moreInfo?: string
    }
    Count: {
      /**
       * Format: int64
       * @description The total number of records
       * @example 501
       */
      count: number
    }
    FieldDefinition: {
      name: string
      displayName: string
      /** @enum {string} */
      wordWrap?: 'None'
      filter?: components['schemas']['FilterDefinition']
      sortable: boolean
      defaultSortColumn: boolean
      /** @enum {string} */
      type: 'String' | 'Date' | 'Long'
    }
    FilterDefinition: {
      /** @enum {string} */
      type: 'Radio' | 'Select' | 'DateRange'
      staticOptions?: components['schemas']['FilterOption'][]
      defaultValue?: string
    }
    FilterOption: {
      name: string
      displayName: string
    }
    ReportDefinition: {
      id: string
      name: string
      description?: string
      variants: components['schemas']['VariantDefinition'][]
    }
    Specification: {
      template: string
      fields: components['schemas']['FieldDefinition'][]
    }
    VariantDefinition: {
      id: string
      name: string
      resourceName: string
      description?: string
      specification?: components['schemas']['Specification']
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /** @description Returns the dataset for the given report ID and report variant ID filtered by the filters provided in the query. */
  configuredApiDataset: {
    parameters: {
      query: {
        selectedPage?: number
        pageSize?: number
        sortColumn?: string
        sortedAsc?: boolean
        /**
         * @description The filter query parameters have to start with the prefix "filters." followed by the name of the filter.
         *       |For range filters, like date for instance, these need to be followed by a .start or .end suffix accordingly.
         *
         * @example {
         *   "filters.date.start": "2023-04-25",
         *   "filters.date.end": "2023-05-30"
         * }
         */
        filters: {
          [key: string]: string
        }
      }
      path: {
        reportId: string
        reportVariantId: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': {
            [key: string]: Record<string, never>
          }[]
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** @description Returns the number of records for the given report ID and report variant ID filtered by the filters provided in the query. */
  configuredApiCount: {
    parameters: {
      query: {
        /**
         * @description The filter query parameters have to start with the prefix "filters." followed by the name of the filter.
         *       |For range filters, like date for instance, these need to be followed by a .start or .end suffix accordingly.
         *
         * @example {
         *   "filters.date.start": "2023-04-25",
         *   "filters.date.end": "2023-05-30"
         * }
         */
        filters: {
          [key: string]: string
        }
      }
      path: {
        reportId: string
        reportVariantId: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['Count']
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** @description Gets all report definitions */
  definitions: {
    parameters: {
      query?: {
        /**
         * @description Set this parameter to filter the list to only include reports for the given rendering method.
         * @example HTML
         */
        renderMethod?: 'HTML' | 'PDF' | 'SVG'
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['ReportDefinition'][]
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
